[{"content":"二分查找 有序数组，无重复元素（因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的）\n难点：\n二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是while(left \u0026lt; right)还是 while(left \u0026lt;= right)，到底是right = middle呢，还是要right = middle - 1呢？\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n第一种写法\u0026ndash;闭区间 while (left \u0026lt;= right) 要使用 \u0026lt;= ，因为left == right是有意义的，所以使用 \u0026lt;=\nif (nums[middle] \u0026gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1\n第二种写法\u0026ndash;开区间 while (left \u0026lt; right)，这里使用 \u0026lt; ,因为left == right在区间[left, right)是没有意义的 if (nums[middle] \u0026gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle] 注意点： 循环在python里没有大括号，只有缩进 mid = int((left+right)/2) \u0026mdash; 不然会自动变为float类型 左闭右闭区间时，right = len(nums)-1 middle = left + ((right - left) / 2);防止溢出 等同于(left + right)/2 相关题目： 搜素插入位置： 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n要点：\n找不到时return mid+1或者left\n==在排序数组中查找元素的第一个和最后一个位置== 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。\n如果数组中不存在目标值 target，返回 [-1, -1]。\n你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。\n注意点：\n有重复元素的存在。导致查找一个target的结果返回不确定\n寻找target在数组里的左右边界，有如下三种情况：\n情况一：target 在数组范围的右边或者左边，例如数组{3, 4, 5}，target为2或者数组{3, 4, 5},target为6，此时应该返回{-1, -1} 情况二：target 在数组范围中，且数组中不存在target，例如数组{3,6,7},target为5，此时应该返回{-1, -1} 情况三：target 在数组范围中，且数组中存在target，例如数组{3,6,7},target为6，此时应该返回{1, 1}\n分别写两个二分查找左边界和右边界，这里我使用的区间定义是闭区间\n1 2 3 寻找右边界的思路：nums[mid]\u0026gt;targrt 则right = mid-1 #尽可能向右试探 ​\tnums[mid]\u0026lt;=target 则继续向后寻找-----left = mid +1 同时还要求rightBorder = left 1 2 3 寻找左边界的思路：#尽可能向左试探 nums[mid]\u0026gt;=target 则继续向左寻找-------right = mid -1同时leftBorder = right rightBorder - leftBorder \u0026gt; 1关键条件判断区间的合理性，是否在数组中存在！！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def getleftBorder(self,nums: List[int], target: int): left,right = 0,len(nums)-1 leftBorder = -2 while(left\u0026lt;=right): mid = left+(right-left)//2 if nums[mid]\u0026gt;=target: right = mid-1 leftBorder = right else: left = mid+1 return leftBorder def getrightBorder(self,nums: List[int], target: int): left,right = 0,len(nums)-1 rightBorder = -2 while(left\u0026lt;=right): mid = left+(right-left)//2 if nums[mid]\u0026gt;target: right = mid-1 else: left = mid+1 rightBorder = left return rightBorder def searchRange(self, nums: List[int], target: int) -\u0026gt; List[int]: leftBorder = self.getleftBorder(nums,target) rightBorder = self.getrightBorder(nums,target) if leftBorder==-2 or rightBorder==-2: return[-1,-1] elif rightBorder-leftBorder\u0026gt;1: return [leftBorder+1,rightBorder-1] else: return[-1,-1] x 的平方根 错误点：\n如果找到了目标，需要返回mid，找不到返回low!!\n错误： mid = left + ((right - left) // 2) # ✅ 正确（使用整数除法 //）\n错误原因：Python 中逻辑或运算符是 or，不是 ||。\n调用类方法未加 self. rightBorder = get_rightBorder(nums,target) # ❌ 错误 leftBorder = get_leftBorder(nums,target) # ❌ 错误 错误原因：类方法需要通过 self. 调用。\n​\t修正后： ​\trightBorder = self.get_rightBorder(nums, target) # ✅ 正确 ​\tleftBorder = self.get_leftBorder(nums, target) # ✅ 正确\n移除元素 由于数组的特性，故删除元素并不是真正的减少存储空间：\n采用快慢指针进行处理，不断用后面的元素覆盖要删去的元素！！\n1 2 3 4 5 6 7 8 9 def removeElement(self, nums: List[int], val: int) -\u0026gt; int: sp = 0 for fp in range(0,len(nums)) : if nums[fp]==val: continue else: nums[sp] = nums[fp] sp+=1 return sp 相关题目 删除有序数组的重复项 给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。\n考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：\n更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。 返回 k 。\n1 2 3 4 5 6 7 8 9 def removeDuplicates(self, nums: List[int]) -\u0026gt; int: sp = 0 for fp in range(0,len(nums)): if nums[fp]==nums[sp]: continue else: sp+=1 nums[sp]=nums[fp] return sp+1 收获 这道题将慢指针于快指针进行对比，还有一种思路是nums[fp]与nums[fp+1]进行对比，不相等则记录在慢指针的位置\n移动零 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 def moveZeroes(self, nums: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; ori_len = len(nums) sp = 0 for fp in range(0,ori_len): if (nums[fp]==0): continue else: nums[sp] = nums[fp] sp+=1 for i in range(sp,ori_len): nums[i]=0 比较含有退格的字符串 给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。\n注意：如果对空文本输入退格字符，文本继续为空。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def backspaceCompare(self, s: str, t: str) -\u0026gt; bool: s_1 = self.proc_str(s) t_1 = self.proc_str(t) return s_1==t_1 def proc_str(self,s:str): s = list(s) # 将字符串转换为列表 sp = 0 for fp in range(len(s)): if s[fp] == \u0026#39;#\u0026#39;: if(sp!=0): sp -=1 continue else: s[sp] = s[fp] sp += 1 return \u0026#39;\u0026#39;.join(s[:sp]) # 将列表转换回字符串并返回 收获 注意题目所说：\n如果对空文本输入退格字符，文本继续为空。所以必须if(sp!=0): sp -=1 加入这个if判断条件\ns =\u0026ldquo;y#fo##f\u0026rdquo; t =\u0026ldquo;y#f#o##f\u0026rdquo;\n注意遇到退格符\u0026quot;#\u0026ldquo;不能仅仅无视，而是删除前一个元素\n在 Python 中，字符串是不可变的（immutable），这意味着你不能直接通过索引修改字符串中的某个字符，例如 s[sp] = s[fp] 这样的操作是不允许的。这就是为什么你会遇到 TypeError: 'str' object does not support item assignment 错误。\n''.join(...)：拼接字符串\njoin 是字符串的一个方法，用于将一个可迭代对象（如列表、元组等）中的元素拼接成一个字符串。\n''.join(...) 表示用空字符串 '' 作为连接符，将可迭代对象中的元素连接起来。\n例如，如果 s[:sp] = ['a', 'b']，那么 ''.join(s[:sp]) 的结果是 'ab'。 有序数组的平方 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\n思路1：先平方再快速排序 1 2 3 4 def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]: square_nums = [x**2 for x in nums] square_nums.sort() return square_nums 1. list.sort() 方法 作用：对列表本身进行排序（原地排序），直接修改原列表。 返回值：无返回值（返回 None）。 语法：list.sort(key=None, reverse=False) key：指定一个函数，用于从每个元素中提取比较键（例如，按字符串长度排序）。 reverse：如果为 True，则按降序排序；默认为 False，即升序排序。 sorted() 函数 作用：返回一个新的排序后的列表，原列表不会被修改。 返回值：返回一个新的排序后的列表。 sorted(iterable, key=None, reverse=False) iterable：可以是列表、元组、字符串等可迭代对象。 key 和 reverse 参数与 list.sort() 相同。 key参数的使用 1 2 3 words = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;cherry\u0026#34;] sorted_words = sorted(words, key=len) # 按字符串长度升序排序 print(sorted_words) # 输出: [\u0026#39;kiwi\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;cherry\u0026#39;, \u0026#39;banana\u0026#39;] 双指针法： 定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。\n如果A[i] * A[i] \u0026lt; A[j] * A[j] 那么result[k\u0026ndash;] = A[j] * A[j]; 。\n如果A[i] * A[i] \u0026gt;= A[j] * A[j] 那么result[k\u0026ndash;] = A[i] * A[i]; 。\n此时的时间复杂度为O(n)，相对于暴力排序的解法O(n + nlog n)还是提升不少的。\n==没有规定必须在原地进行改动==\n1 2 3 4 5 6 7 8 9 10 11 12 13 def sortedSquares(self, nums: List[int]) -\u0026gt; List[int]: k = len(nums)-1 result = [0 for _ in nums] i,j =0,k while(i\u0026lt;=j): if nums[i]**2\u0026lt;nums[j]**2: result[k] = nums[j]**2 j-=1 else: result[k] = nums[i]**2 i+=1 k-=1 return result 初始化列表 1. 使用乘法运算符 \\* 初始化 这是最简单的方式，适用于初始化一个包含相同元素的列表。\n示例： 使用乘法进行列表的初始化 1 2 3 4 # 初始化一个长度为 5 的列表，所有元素为 0 size = 5 my_list = [0] * size print(my_list) # 输出: [0, 0, 0, 0, 0] 如果列表中的元素是可变对象（如列表、字典等），这种方式会导致所有元素引用同一个对象。例如：\n1 2 3 4 size = 3 my_list = [[]] * size my_list[0].append(1) print(my_list) # 输出: [[1], [1], [1]] 这是因为 [[]] * size 创建了 size 个引用，指向同一个空列表。\n2. 使用列表推导式初始化 列表推导式可以灵活地初始化列表，并支持根据索引或其他条件生成元素。\n示例： 1 2 3 4 5 6 7 8 # 初始化一个长度为 5 的列表，所有元素为 0 size = 5 my_list = [0 for _ in range(size)] print(my_list) # 输出: [0, 0, 0, 0, 0] # 初始化一个长度为 5 的列表，元素为索引的平方 my_list = [i ** 2 for i in range(size)] print(my_list) # 输出: [0, 1, 4, 9, 16] ","date":"2025-02-16T10:48:05+08:00","permalink":"https://freshfish-hust.github.io/p/%E6%95%B0%E7%BB%84part01/","title":"数组part01"},{"content":"● 24. 两两交换链表中的节点\n​ ● 19.删除链表的倒数第N个节点\n​ ● 面试题 02.07. 链表相交\n​ ● 142.环形链表II\n​ ● 总结\n小tips:\n一般涉及到 增删改操作，用虚拟头结点都会方便很多， 如果只能查的话，用不用虚拟头结点都差不多。 当然大家也可以为了方便记忆，统一都用虚拟头结点。\n两两交换链表中的节点 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n注意事项 是否需要虚拟头节点？ 需要！例如下图交换1和2两个节点的顺序，只有知道1节点前面的节点cur，才能==让cur指向2号节点==\n循环终止条件： 不难发现，我们的代码执行逻辑是cur交换后面两个节点的顺序，故偶数与奇数循环终止有区别。\n循环终止条件：while(cur.next != None and cur.next.next!=None):\n注意==and连接的两个顺序不能改变==\u0026ndash;若cur.next.next!=None放在前面可能会==空指针没有next属性的错误==\n交换的顺序以及节点保存： 1号节点和3号节点在交换时会发生丢失，需要进行保存\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 def swapPairs(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: dummyhead = ListNode(0,head) cur = dummyhead while(cur.next != None and cur.next.next!=None): tmp = cur.next temp1 = cur.next.next.next cur.next = cur.next.next cur.next.next = tmp tmp.next = temp1 cur = cur.next.next return dummyhead.next 删除链表的倒数第N个节点 ==删除一个节点需要找到它的前一个节点==\n注意如何找到倒数第n个节点：\n表面上需要确定链表的size，但此时确定size需要遍历一遍链表，删除节点时需要找到其前面的节点也需要循环遍历耗费时间接近$2sz$($sz$为链表的长度)\n双指针 采用双指针的方法可以实现1次遍历完成删除倒数第N个节点\n确定一个left指针与一个right指针，==开始时让他们保留一定的间隔（right为left后面的第n个节点）==使right遍历到链表的最后一个结点时，left恰好为倒数第N+1个节点\n实现代码 1 2 3 4 5 6 7 8 9 10 11 def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u0026gt; Optional[ListNode]: dummy_head = ListNode(0,head) left = dummy_head right = left for i in range(n): right = right.next while(right.next!=None): left = left.next right = right.next left.next = left.next.next return dummy_head.next 面试题 链表相交 本题没有视频讲解，大家注意 数值相同，不代表指针相同\n思路： 对A走过的节点留一个标记，然后遍历B即可，但是数据结构提前定义好了\n链表相交需要确定指针相同，但是正向遍历链表面临的一大难题就是何时移动A和B的指针？难道每次curA指向A的一个节点，B就全部遍历一遍吗？\n如果能从后向前遍历，问题就很好解决，但是很遗憾指针的指向不可以改变\n但是从后向前遍历给了我们一个提醒，既然是相交链表的话，后面的部分一定是重合的。\n让curA移动到剩余长度与B对齐的位置（==尾端对其==），然后两个指针就可以实现同步移动再进行比较即可\n下面的代码可以实现位段对齐，为下面的同步移动做好准备！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 curA = dummyheadA curB = dummyheadB while(curA.next!=None): curA = curA.next lenA+=1 while(curB.next!=None): curB = curB.next lenB+=1 curA = dummyheadA curB = dummyheadB if(lenA\u0026gt;=lenB): #gap = lenA-lenB print(\u0026#34;gap:\u0026#34;,gap) for i in range(gap): curA = curA.next else: gap = lenB-lenA #print(\u0026#34;gap:\u0026#34;,gap) for i in range(gap): curB = curB.next 接下来同步对比的时候注意==对比的是指针而不是值==\n1 2 3 4 5 6 while(curA.next!=None): if curA.next==curB.next: return curA.next curA = curA.next curB = curB.next return None 一些感悟： 对于一道题目不要上来就想还要先求长度会不会太繁琐之类的，有时候这些过程是必须的，所以先顺着自己的思路写，后面再想改进方法\n整理后的写法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u0026gt; ListNode: dis = self.getLength(headA) - self.getLength(headB) # 通过移动较长的链表，使两链表长度相等 if dis \u0026gt; 0: headA = self.moveForward(headA, dis) else: headB = self.moveForward(headB, abs(dis)) # 将两个头向前移动，直到它们相交 while headA and headB: if headA == headB: return headA headA = headA.next headB = headB.next return None def getLength(self, head: ListNode) -\u0026gt; int: length = 0 while head: length += 1 head = head.next return length def moveForward(self, head: ListNode, steps: int) -\u0026gt; ListNode: while steps \u0026gt; 0: head = head.next steps -= 1 return head 环形链表Ⅱ 题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n为了表示给定链表中的环，使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。\n说明：不允许修改给定的链表。\n判断链表是否有环？ 使用快慢指针，fast是走两步，slow是走一步，其实相对于slow来说，fast是一个节点一个节点的靠近slow的，所以fast一定可以和slow重合。\n有环如何找到这个环的入口？ 假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。\n通过数学推理得到X与Z的关系，最后确定X和Z再次相遇的地方一定是环的入口\n实现代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 def detectCycle(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: fast,slow = head,head while(fast!=None and fast.next!=None): fast = fast.next.next slow = slow.next if(slow == fast): index1 = fast index2 = head while(index1 != index2): index1 = index1.next index2 = index2.next return index1 return None ","date":"2025-02-15T13:36:27+08:00","permalink":"https://freshfish-hust.github.io/p/%E9%93%BE%E8%A1%A8part02/","title":"链表part02"},{"content":" 设计链表 翻转链表 删除链表元素 链表基础 单链表 双链表 循环链表 链表的定义： 1 2 3 4 5 class ListNode: def __init__(self.val,next = NULL): self.val = val self.next = next 链表的删除 只要将C节点的next指针 指向E节点就可以了。\n那有同学说了，D节点不是依然存留在内存里么？只不过是没有在这个链表里而已。\n是这样的，所以在C++里最好是再手动释放这个D节点，释放这块内存。\n其他语言例如Java、Python，就有自己的内存回收机制，就不用自己手动释放了。\n可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。\n但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。\n移除链表元素 这里就涉及如下链表操作的两种方式：\n直接使用原来的链表来进行删除操作。 设置一个虚拟头结点再进行删除操作。 当直接使用原来的链表进行移除的时候，将head指针向后移动一位，然后将删除原头节点即可\n需要单独写一段逻辑来处理移除头结点的情况。\n设置一个虚拟头结点在进行删除操作。这样原链表的所有节点就都可以按照统一的方式进行移除了。return 头结点的时候，别忘了 return dummyNode-\u0026gt;next;， 这才是新的头结点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: ListNode* removeElements(ListNode* head, int val) { ListNode* dummyHead = new ListNode(0); // 设置一个虚拟头结点 dummyHead-\u0026gt;next = head; // 将虚拟头结点指向head，这样方便后面做删除操作 ListNode* cur = dummyHead; while (cur-\u0026gt;next != NULL) { if(cur-\u0026gt;next-\u0026gt;val == val) { ListNode* tmp = cur-\u0026gt;next; cur-\u0026gt;next = cur-\u0026gt;next-\u0026gt;next; delete tmp; } else { cur = cur-\u0026gt;next; } } head = dummyHead-\u0026gt;next; delete dummyHead;//创建之后别忘了删除 return head; } }; 通过递归的写法：\n解释：首先检查头节点的值是否为 val，如果是则移除头节点，答案即为在头节点的后续节点上递归的结果；\n如果头节点的值不为 val，则答案为头节点与在头节点的后续节点上递归得到的新链表拼接的结果。\n递归函数返回的值是头节点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public: ListNode* removeElements(ListNode* head, int val) { // 基础情况：空链表 if (head == nullptr) { return nullptr; } // 递归处理 if (head-\u0026gt;val == val) { ListNode* newHead = removeElements(head-\u0026gt;next, val); delete head; return newHead; } else { head-\u0026gt;next = removeElements(head-\u0026gt;next, val);//拼接的结果 return head; } } }; 对比python的写法：python中没有指针。同时注意python中的空为None\n1 2 3 4 5 6 7 8 9 10 11 12 13 def removeElements(self, head: Optional[ListNode], val: int) -\u0026gt; Optional[ListNode]: # 创建虚拟头部节点以简化删除过程 dummy_head = ListNode(next = head) # 遍历列表并删除值为val的节点 current = dummy_head while current.next: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy_head.next 设计链表\u0026ndash;一题五吃 指针指向目标节点的前一个节点，才可以在目标节点前插入一个节点！！\n注意添加节点的指针改变顺序！！\n在第n个节点前插入一个节点和删除第n个节点都需要cur指向第n-1个节点！！！\n如何检验index的合法性？\u0026ndash;size属性\n没有头节点！！\n清楚链表类与链节点类的区别： 1 2 3 4 class ListNode: def __init__(self,val=0,next=None): self.val = val self.next = next 在链表结构初始化的时候有两种方式： 第一：定义self.head节点，第二：定义self.dummy_head。这里推荐第二种写法，因为在插入和删除都有可能会改变头节点，但是不会影响dummy_head，想使用头节点时直接使用dummy_head.next即可！！\n第一种：定义self.head: 1 2 3 4 5 6 def __init__(self,size = 1): \u0026#39;\u0026#39;\u0026#39; 初始化，定义节点类型 \u0026#39;\u0026#39;\u0026#39; self.head = self.ListNode(next = None) self.size = size 改为：\n1 2 3 4 5 6 def __init__(self,size = 0): \u0026#39;\u0026#39;\u0026#39; 初始化，定义节点类型 \u0026#39;\u0026#39;\u0026#39; self.head = None self.size = size self.head = dummyhead.next神句\n第二种： 1 2 3 def __init__(self,size = 0): self.size = size self.dummy_head = ListNode(0) 头插： 1 2 3 def addAtHead(self, val: int) -\u0026gt; None: self.dummy_head.next = ListNode(val,self.dummy_head.next) self.size += 1 尾插 1 2 3 4 5 6 7 def addAtTail(self, val: int) -\u0026gt; None: cur = self.dummy_head while cur.next: cur = cur.next cur.next = ListNode(val) self.size += 1 # 此时如果对空链表尾插，不需要调整头节点 按index插入： 1 2 3 4 5 6 7 8 9 def addAtIndex(self, index: int, val: int) -\u0026gt; None: if index \u0026lt; 0 or index \u0026gt; self.size: return cur = self.dummy_head #index为size代表尾插 for i in range(index): cur = cur.next cur.next = ListNode(val,cur.next) self.size += 1 删除index节点 1 2 3 4 5 6 7 8 def deleteAtIndex(self, index: int) -\u0026gt; None: if index \u0026lt; 0 or index \u0026gt;= self.size: return cur = self.dummy_head for i in range(index): cur = cur.next cur.next = cur.next.next self.size -= 1 反转链表 递归的写法其实上手难度比较高，所以推荐先掌握双指针的写法再进一步学习递归的写法\n双指针的写法 初始化： pre = None ，cur = head 从第一个节点进行反转，同时设置pre的值为None也符合反转后链表的末尾为None的要求\n循环终止条件 while(cur !=None): 当最后一个节点进行反转之后，cur会变成cur.next即None\n返回值 循环结束时，cur的值为None，而此时的pre即为新的链表头\n1 2 3 4 5 6 7 8 9 def reverseList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: pre = None cur = head while(cur != None): temp = cur.next cur.next = pre pre = cur cur = temp return pre 递归的写法 由于leetcode上面的函数reverseList仅仅只有链表头部这一个输入参数，所以可以再定义一个函数\n第一次编写my_rev发生的错误如下:\n1 2 3 4 5 6 7 8 9 10 def my_rev(cur,pre): # 递归终止条件： if (!cur): return pre temp = cur.next cur.next = pre pre = cur cur = temp my_rev(temp,cur) #最后调用出现错误，cur与temp为同一个节点 修改如下：\n1 2 3 4 5 6 7 8 9 # 类函数必须有self def my_rev(self,cur,pre): # 递归终止条件： if (not cur): return pre temp = cur.next cur.next = pre return self.my_rev(temp,cur) # 最开始写的时候总是忘写返回值 随后在主函数里进行调用\n1 2 3 def reverseList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: ret = self.my_rev(head,None) return ret ","date":"2025-02-14T16:35:31+08:00","permalink":"https://freshfish-hust.github.io/p/%E9%93%BE%E8%A1%A8part_01/","title":"链表part_01"},{"content":"hugo +Github搭建属于自己的博客 ","date":"2025-02-13T18:40:35+08:00","permalink":"https://freshfish-hust.github.io/p/myfirstblog/","title":"MyfirstBlog"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://freshfish-hust.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://freshfish-hust.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://freshfish-hust.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://freshfish-hust.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://freshfish-hust.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://freshfish-hust.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://freshfish-hust.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://freshfish-hust.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://freshfish-hust.github.io/p/emoji-support/","title":"Emoji Support"}]